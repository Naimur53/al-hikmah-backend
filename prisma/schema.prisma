generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EUserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

enum ELoginProvider {
  google
  normalEmail
}

model VerificationOtp {
  id        String           @id @default(uuid())
  type      EVerificationOtp
  otp       Int
  createdAt DateTime         @default(now())
  ownById   String
  ownBy     User             @relation(fields: [ownById], references: [id], onDelete: Cascade)
}

enum EVerificationOtp {
  createUser
  forgotPassword
  deleteUser
  adminLogin
}

model User {
  id           String    @id @default(uuid()) @unique
  name         String
  email        String    @unique
  password     String?
  gId         String?   @unique
  photoUrl     String?   @default("https://i.ibb.co.com/MPbD6mc/User-icon-2-svg.png")
  loginProvider ELoginProvider @default(normalEmail)
  role         EUserRole @default(USER)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  isVerified   Boolean   @default(false)
  isBlocked    Boolean   @default(false)
  
  VerificationOtp         VerificationOtp[]

  blogs        Blog[]    // Relation to blogs created by the user
  wishlist     Wishlist[] // One-to-one relation for a user's wishlist
}

model Blog {
  id          String    @id @default(uuid()) @unique
  title       String
  description String
  status      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  authorId    String
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade) // Author of the blog
}

model Wishlist {
  id        String    @id @default(uuid()) @unique
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade) // Wishlist belongs to a user
}

model BookCategory {
  id          String    @id @default(uuid()) @unique
  name        String
  description String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  books       Book[]    // One-to-many relation with books
}

model Book {
  id           String       @id @default(uuid()) @unique
  name         String
  photo        String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  categoryId   String?
  category     BookCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade) // Optional category for the book

  authorId     String
  author       Author       @relation(fields: [authorId], references: [id], onDelete: Cascade) // Book's author

  publisherId  String
  publisher    Publisher    @relation(fields: [publisherId], references: [id], onDelete: Cascade) // Book's publisher

  chapters     Chapter[]    // One-to-many relation with chapters
}

model Author {
  id           String    @id @default(uuid()) @unique
  name         String
  photoUrl     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  books        Book[]    // One-to-many relation with books
}

model Publisher {
  id           String    @id @default(uuid()) @unique
  name         String
  photoUrl     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  books        Book[]    // One-to-many relation with books
}

model Chapter {
  id          String        @id @default(uuid()) @unique
  title       String
  bookId      String
  book        Book          @relation(fields: [bookId], references: [id], onDelete: Cascade) // Belongs to a book
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  subChapters SubChapter[]  // One-to-many relation with sub-chapters
}

model SubChapter {
  id         String    @id @default(uuid()) @unique
  title      String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  chapterId  String
  chapter    Chapter   @relation(fields: [chapterId], references: [id], onDelete: Cascade) // Belongs to a chapter
}
